<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Glowing - Reveal The Beauty of Skin</title>

    <!-- 
    - favicon
  -->
    <link rel="shortcut icon" href="./favicon.svg" type="image/svg+xml">

    <!-- 
    - custom css link
  -->
    <link rel="stylesheet" href="./assets/css/style.css">
    <link rel="stylesheet" href="./assets/css/checkout.css">
    <link rel="stylesheet" href="./assets/css/addproducts.css">

    <!-- 
    - google font link
  -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Urbanist:wght@400;500;600;700;800&display=swap"
        rel="stylesheet">

    <!-- 
    - preload images
  -->
    <link rel="preload" as="image" href="./assets/images/logo.png">
    <link rel="preload" as="image" href="./assets/images/hero-banner-1.jpg">
    <link rel="preload" as="image" href="./assets/images/hero-banner-2.jpg">
    <link rel="preload" as="image" href="./assets/images/hero-banner-3.jpg">

</head>

<body id="top">

    <!-- 
    - #HEADER
  -->

    <%- include('partials/header') %>


    <!-- 
        - #ADD PRODUCTS
      -->

    <section class="add-product-section">
  <h2>Add New Product</h2>
  <form id="addProductForm">
            <input type="text" name="name" placeholder="Product Name" required />
            <input type="text" name="company" placeholder="Brand / Company" />
            <textarea name="description" placeholder="Product Description" required></textarea>
            <input type="number" name="price" placeholder="Your Selling Price" required />
            <input type="number" name="oldPrice" placeholder="Old Price (Optional)" />
            <input type="number" name="discount" placeholder="Discount (%) (Optional)" />
            <input type="text" name="category" placeholder="Category (e.g. Anime, Trendy)" />
            <input type="number" name="stock" placeholder="Stock (Optional)" />
            <input type="number" name="reviews" placeholder="Reviews (Optional)" />
            <input type="number" name="rating" placeholder="Rating (Optional)" />

            <input type="url" name="image" placeholder="Main Image URL" required />
            <input type="url" name="images" placeholder="Comma-separated gallery image URLs" />
            <input type="url" name="thumbnails" placeholder="Comma-separated thumbnail URLs" />

            <h3>Qikink Details</h3>
            <input type="number" name="qikinkProductId" placeholder="productId" required />
            <input type="number" name="qikinkBaseCost" placeholder="Qikink Base Cost (e.g., 199.5)"  />
            <input type="number" name="qikinkProductType" placeholder="product Type" required />

            <label for="variations">Product Variations (JSON format):</label>
            
            <textarea name="variations" id="variations" rows="10" cols="60" placeholder='Paste JSON here...'></textarea>

            <!-- <input type="text" name="qikinkDesignIdentifier" placeholder="Qikink Design Identifier (e.g., vecteezy_...)" />
            <input type="text" name="qikinkProductType" placeholder="Qikink Product Type (e.g., Cotton Apparels)" /> -->

            <button type="submit">Add Product</button>
        </form>

  <p id="formMessage"></p>
</section>

<script>
  // This script block should be placed within your HTML body, preferably at the end, as it was.
// The <script> tags are already present in your original HTML.

const form = document.getElementById("addProductForm");

form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Helper function to safely parse numbers, defaulting to null if empty or invalid
    const parseNumber = (value) => {
        const num = parseFloat(value);
        return isNaN(num) ? undefined : num; // Use undefined to omit if not provided
    };

    // Helper function to safely parse integers
    const parseIntSafe = (value) => {
        const num = parseInt(value);
        return isNaN(num) ? undefined : num;
    };

    const formData = {
        name: form.name.value,
        company: form.company.value || undefined, // Send as undefined if empty
        description: form.description.value,
        price: parseNumber(form.price.value),
        oldPrice: parseNumber(form.oldPrice.value),
        discount: parseNumber(form.discount.value),
        rating: parseNumber(form.rating.value),
        reviews: parseIntSafe(form.reviews.value),
        image: form.image.value,
        // Ensure that empty image/thumbnail strings don't result in empty string arrays
        images: form.images.value ? form.images.value.split(',').map(img => img.trim()).filter(img => img !== '') : [],
        thumbnails: form.thumbnails.value ? form.thumbnails.value.split(',').map(img => img.trim()).filter(img => img !== '') : [],
        category: form.category.value || undefined,
        stock: parseIntSafe(form.stock.value),

        // --- NEW Qikink Fields ---
        variations: form.variations.value,
        qikinkProductId: form.qikinkProductId.value,
        qikinkBaseCost: parseNumber(form.qikinkBaseCost.value),
        // qikinkDesignIdentifier: form.qikinkDesignIdentifier.value,
        qikinkProductType: form.qikinkBaseCost.value || undefined,

        // Variations are complex for a simple form. You might add them directly in DB or via another interface.
        // If you were to add them, it would look something like this (for one hardcoded variant):
        /*
        variations: [
            {
                size: form.variantSize1.value || undefined,
                color: form.variantColor1.value || undefined,
                qikinkVariantIdentifier: form.qikinkVariantIdentifier1.value || undefined,
                qikinkVariantCost: parseNumber(form.qikinkVariantCost1.value),
                variantSellingPrice: parseNumber(form.variantSellingPrice1.value)
            }
        ].filter(v => v.size && v.color) // Only include if size and color are provided
        */
    };

    console.log("Sending data:", formData);

    try {
        const response = await fetch("/api/products", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (response.ok) {
            document.getElementById("formMessage").innerText = "Product added successfully!";
            form.reset(); // Clear the form after successful submission
        } else {
            // Display specific error messages from the backend if available
            const errorMessage = result.message || result.error || "Unknown error.";
            document.getElementById("formMessage").innerText = "Error: " + errorMessage;
        }
    } catch (err) {
        console.error("Fetch error:", err);
        document.getElementById("formMessage").innerText = "An error occurred while sending the request.";
    }
  });
</script>



    <!-- 
    - #FOOTER
  -->

     <%- include('partials/footer') %>


    



    <!-- 
    - custom js link
  -->
    <script src="./assets/js/script.js" defer></script>
    <script src="main.js" defer></script>
    <script src="slider.js" defer></script>
    <script src="cart.js" defer></script>
  <script src="/assets/js/userlogin.js" defer></script>


    <!-- 
    - ionicon link
  -->
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>

</body>

</html>